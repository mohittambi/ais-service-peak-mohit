AWSTemplateFormatVersion: "2010-09-09"
Description: Deployment pipeline for AIS ais-service-peak-mohit Service
Parameters:
  GithubRepoOwner:
    Type: String
  GithubRepoName:
    Type: String
  GithubRepoBranch:
    Type: String
  GithubOauthToken:
    Type: String
    NoEcho: true
  Stage:
    Type: String
  Domain:
    Description: Domain to deploy the service to. A base path mapping will be added from this domain to the service's API gateway. Only required if the service uses http events.
    Default: "api.peak.ai"
    AllowedValues:
      - api.peak.ai
      - api.beta.peak.ai
      - api.test.peak.ai
      - api.dev.peak.ai
    Type: String
  ServerlessVersion:
    Type: String
  NPMAuthToken:
    Type: String
    NoEcho: true
  NotificationMonitorFunction:
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Source Code Repository
        Parameters:
          - GithubRepoOwner
          - GithubRepoName
          - GithubRepoBranch
          - GithubOauthToken
Resources:
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Suspended
      AccessControl: BucketOwnerFullControl
      PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          IgnorePublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      DisableInboundStageTransitions:
        -
          StageName: Deploy
          Reason: 'Disable transition until ready to deploy.'
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Ref AWS::StackName
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: !Ref GithubRepoBranch
                OAuthToken: !Ref GithubOauthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: NotificationMonitor
            InputArtifacts: []
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: NotificationMonitorFunction
              UserParameters:
                !Sub |
                  {"pipeline": "${AWS::StackName}"}
            RunOrder: 1
          - Name: DeployBackend
            ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: DeployBackendOutput
            Configuration:
                ProjectName: !Ref DeployBackendBuild
            RunOrder: 1
  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubOauthToken
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: !Ref AWS::StackName
      TargetPipelineVersion: 1
      RegisterWithThirdParty: true
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:Invoke*
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${NotificationMonitorFunction}
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactStoreBucket}
                  - !Sub arn:aws:s3:::${ArtifactStoreBucket}/*
  DeployBackendBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: SLS_DEBUG
            Value: true
          - Name: STAGE
            Value: !Ref Stage
          - Name: DOMAIN
            Value: !Ref Domain
          - Name: SERVERLESS_VERSION
            Value: !Ref ServerlessVersion
          - Name: NPM_AUTH_TOKEN
            Value: !Ref NPMAuthToken
      Name: !Sub ${AWS::StackName}
      ServiceRole: !Ref DeployBackendBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - apt-get update -y
                - echo "//registry.npmjs.org/:_authToken="$NPM_AUTH_TOKEN > .npmrc
                - npm install -g serverless@$SERVERLESS_VERSION
                - npm install -g yarn
                - make install
                - make tests-unit
                - make graphql-deploy
            build:
              commands:
                - make deploy stage=$STAGE
  DeployBackendBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:*
                  - events:*
                  - apigateway:*
                  - cloudwatch:*
                  - lambda:*
                  - route53:ListHostedZones
                  - route53:ChangeResourceRecordSets
                  - route53:GetHostedZone
                  - route53:ListResourceRecordSets
                  - cloudfront:UpdateDistribution
                  - acm:ListCertificates
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                  - s3:PutBucketVersioning
                  - s3:GetBucketLocation
                  - s3:PutLifecycleConfiguration
                  - s3:PutBucketCORS
                  - s3:PutBucketNotification
                  - s3:GetBucketEncryption
                  - s3:PutBucketEncryption
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                  - s3:DeleteBucketNotification
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                  - s3:SetBucketEncryption
                  - s3:GetEncryptionConfiguration
                  - s3:PutEncryptionConfiguration
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ValidateTemplate
                  - cloudformation:ListStackResources
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:GetRole
                  - iam:PassRole
                  - iam:DeleteRolePolicy
                  - iam:PutRolePolicy
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - sqs:CreateQueue
                  - sqs:GetQueueAttributes
                  - sqs:DeleteQueue
                  - sqs:SetQueueAttributes
                Resource: "*"
